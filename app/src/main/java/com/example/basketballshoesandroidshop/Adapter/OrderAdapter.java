package com.example.basketballshoesandroidshop.Adapter;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.FragmentActivity;
import androidx.fragment.app.FragmentManager;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.example.basketballshoesandroidshop.Activity.OrderDetailActivity;
import com.example.basketballshoesandroidshop.Activity.RatingDialogFragment;
import com.example.basketballshoesandroidshop.Domain.OrderItemModel;
import com.example.basketballshoesandroidshop.Domain.OrderModel;
import com.example.basketballshoesandroidshop.R;
import com.example.basketballshoesandroidshop.Utils.SessionManager;

import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;

import com.example.basketballshoesandroidshop.Repository.MainRepository;
import android.util.Log;
import com.example.basketballshoesandroidshop.Activity.CartAcitivity;

import java.util.concurrent.atomic.AtomicInteger;
import androidx.appcompat.app.AlertDialog;
import com.example.basketballshoesandroidshop.Domain.CartItemModel;
// Th√™m import cho t√≠nh nƒÉng mua l·∫°i
import java.util.ArrayList;

public class OrderAdapter extends RecyclerView.Adapter<OrderAdapter.OrderViewHolder> {

    private final List<OrderModel> orderList;
    private final Context context;
    private final LayoutInflater inflater;

    public OrderAdapter(List<OrderModel> orderList, Context context) {
        this.orderList = orderList;
        this.context = context;
        this.inflater = LayoutInflater.from(context);
    }

    @NonNull
    @Override
    public OrderViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = inflater.inflate(R.layout.item_order, parent, false);
        return new OrderViewHolder(view);
    }

    @Override
    public void onBindViewHolder(@NonNull OrderViewHolder holder, int position) {
        OrderModel order = orderList.get(position);

        holder.textViewStoreName.setText("Store");

        if ("ƒê√£ giao".equalsIgnoreCase(order.getOrderStatus()) || "Ho√†n th√†nh".equalsIgnoreCase(order.getOrderStatus())) {
            holder.buttonRate.setVisibility(View.VISIBLE);
        } else {
            holder.buttonRate.setVisibility(View.GONE);
        }

        // TH√äM LOGIC MUA L·∫†I - CH·ªà HI·ªÇN TH·ªä CHO ƒê∆†N H√ÄNG ƒê√É GIAO
        if ("ƒê√£ giao".equals(order.getOrderStatus())) {
            holder.buttonBuyAgain.setVisibility(View.VISIBLE);
            holder.buttonBuyAgain.setOnClickListener(v -> handleRebuyOrder(order));
        } else {
            holder.buttonBuyAgain.setVisibility(View.GONE);
        }

        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));
        holder.textViewTotal.setText("T·ªïng s·ªë ti·ªÅn: " + currencyFormat.format(order.getTotalPrice()));

        // X√≥a c√°c view item c≈© tr∆∞·ªõc khi th√™m m·ªõi
        holder.layoutOrderItems.removeAllViews();

        // Dynamically add product items
        if (order.getItems() != null && !order.getItems().isEmpty()) {
            for (OrderItemModel item : order.getItems()) {
                View itemView = inflater.inflate(R.layout.item_order_product, holder.layoutOrderItems, false);

                ImageView imageViewProduct = itemView.findViewById(R.id.imageViewProduct);
                TextView textViewProductTitle = itemView.findViewById(R.id.textViewProductTitle);
                TextView textViewProductPrice = itemView.findViewById(R.id.textViewProductPrice);
                TextView textViewProductQuantity = itemView.findViewById(R.id.textViewProductQuantity);

                textViewProductTitle.setText(item.getTitle());
                textViewProductPrice.setText(currencyFormat.format(item.getPrice()));
                textViewProductQuantity.setText("x" + item.getQuantity());

                Glide.with(context)
                        .load(item.getPicUrl())
                        .placeholder(R.drawable.ic_image_placeholder) // Placeholder image
                        .into(imageViewProduct);

                holder.layoutOrderItems.addView(itemView);
            }
        }

        holder.itemView.setOnClickListener(v -> {

            String orderId = order.getOrderId();
            SessionManager sessionManager = new SessionManager(context);

            String userId = sessionManager.getCurrentUserId();

            // T·∫°o Intent ƒë·ªÉ m·ªü OrderDetailActivity
            Intent intent = new Intent(context, OrderDetailActivity.class);

            // ƒê√≠nh k√®m d·ªØ li·ªáu c·∫ßn thi·∫øt
            intent.putExtra("USER_ID", userId);
            intent.putExtra("ORDER_ID", orderId);

            // Kh·ªüi ch·∫°y Activity m·ªõi
            context.startActivity(intent);
        });

        holder.buttonRate.setOnClickListener(v -> {
            // Gi·∫£ s·ª≠ ch√∫ng ta ƒë√°nh gi√° s·∫£n ph·∫©m ƒë·∫ßu ti√™n trong ƒë∆°n h√†ng
            if (order.getItems() != null && !order.getItems().isEmpty()) {
                String itemIdToRate = order.getItems().get(0).getItemId();
                String orderId = order.getOrderId();

                FragmentManager fragmentManager = ((AppCompatActivity) context).getSupportFragmentManager();

                RatingDialogFragment dialog = RatingDialogFragment.newInstance(orderId, itemIdToRate);
                dialog.show(fragmentManager, "RatingDialog");
            } else {
                Toast.makeText(context, "Kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ ƒë√°nh gi√°.", Toast.LENGTH_SHORT).show();
            }
        });
    }

    // TH√äM METHOD MUA L·∫†I
    private void handleRebuyOrder(OrderModel order) {
        if (order.getItems() == null || order.getItems().isEmpty()) {
            Toast.makeText(context, "ƒê∆°n h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m ƒë·ªÉ mua l·∫°i", Toast.LENGTH_SHORT).show();
            return;
        }

        // Show loading dialog
        AlertDialog.Builder builder = new AlertDialog.Builder(context);
        builder.setTitle("üîÑ ƒêang chu·∫©n b·ªã ƒë∆°n h√†ng")
                .setMessage("ƒêang th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng...")
                .setCancelable(false);

        AlertDialog loadingDialog = builder.create();
        loadingDialog.show();

        // Add all items to cart
        addOrderItemsToCart(order, loadingDialog);
    }
    private void addOrderItemsToCart(OrderModel order, AlertDialog loadingDialog) {
        String userId = getCurrentUserId();
        List<OrderItemModel> orderItems = order.getItems();

        // Counter ƒë·ªÉ track s·ªë items ƒë√£ th√™m
        AtomicInteger itemsProcessed = new AtomicInteger(0);
        AtomicInteger itemsAdded = new AtomicInteger(0);
        int totalItems = orderItems.size();

        for (OrderItemModel orderItem : orderItems) {
            // Chuy·ªÉn OrderItemModel th√†nh CartItemModel
            CartItemModel cartItem = new CartItemModel(
                    orderItem.getItemId(),
                    orderItem.getPrice(),
                    orderItem.getQuantity(),
                    orderItem.getSize(),
                    "" // Color - c√≥ th·ªÉ ƒë·ªÉ tr·ªëng ho·∫∑c default
            );

            // Add to Firebase cart
            MainRepository repository = new MainRepository();
            repository.addToCart(userId, cartItem)
                    .addOnSuccessListener(aVoid -> {
                        itemsAdded.incrementAndGet();
                        checkAndFinalize(itemsProcessed.incrementAndGet(), totalItems,
                                itemsAdded.get(), order, loadingDialog);
                    })
                    .addOnFailureListener(e -> {
                        Log.e("OrderAdapter", "Failed to add item to cart: " + e.getMessage());
                        checkAndFinalize(itemsProcessed.incrementAndGet(), totalItems,
                                itemsAdded.get(), order, loadingDialog);
                    });
        }
    }

    private void checkAndFinalize(int processed, int total, int added, OrderModel order, AlertDialog loadingDialog) {
        if (processed == total) {
            // ƒê√£ x·ª≠ l√Ω xong t·∫•t c·∫£ items
            loadingDialog.dismiss();

            if (added > 0) {
                // Navigate to CartActivity
                Intent intent = new Intent(context, CartAcitivity.class);
                intent.putExtra("FROM_REBUY", true);
                intent.putExtra("REBUY_ORDER_ID", order.getOrderId());
                intent.putExtra("REBUY_ITEMS_COUNT", added);
                context.startActivity(intent);

                // Show success message
                Toast.makeText(context,
                        String.format("‚úÖ ƒê√£ th√™m %d s·∫£n ph·∫©m t·ª´ ƒë∆°n #%s v√†o gi·ªè h√†ng",
                                added, order.getOrderId()),
                        Toast.LENGTH_LONG).show();
            } else {
                // Kh√¥ng th√™m ƒë∆∞·ª£c item n√†o
                Toast.makeText(context, "‚ùå Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng", Toast.LENGTH_SHORT).show();
            }
        }
    }

    // TH√äM METHOD L·∫§Y USER ID
    private String getCurrentUserId() {
        SharedPreferences prefs = context.getSharedPreferences("user_prefs", Context.MODE_PRIVATE);
        return prefs.getString("user_id", "user_001");
    }

    @Override
    public int getItemCount() {
        return orderList.size();
    }

    static class OrderViewHolder extends RecyclerView.ViewHolder {
        TextView textViewStoreName, textViewOrderStatus, textViewTotal;
        LinearLayout layoutOrderItems;
        Button buttonBuyAgain, buttonRate;

        public OrderViewHolder(@NonNull View itemView) {
            super(itemView);
            textViewStoreName = itemView.findViewById(R.id.textViewStoreName);
            textViewOrderStatus = itemView.findViewById(R.id.textViewOrderStatus);
            layoutOrderItems = itemView.findViewById(R.id.layoutOrderItems);
            textViewTotal = itemView.findViewById(R.id.textViewTotal);
            buttonBuyAgain = itemView.findViewById(R.id.buttonBuyAgain);
            buttonRate = itemView.findViewById(R.id.buttonRate);
        }
    }
}